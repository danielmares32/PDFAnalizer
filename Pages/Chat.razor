@page "/chat"
@using Microsoft.JSInterop
@using System.Net.Http.Json;
@using System.Text.Json;



    <MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Start">Ready to explore your PDF?</MudText>
    <MudText Class="mb-8">Feel free to inquire about the document. Ask away!</MudText>

    <MudTextField @bind-Value="userMessage" Placeholder="Type your message..." Variant="Variant.Filled" Class="mb-4" />
    <MudButton OnClick="SendMessage" Variant="Variant.Filled" Color="Color.Primary">Send</MudButton>
    <br><br>
    <div class="chat-messages">
        @foreach (var message in chatMessages)
        {
            <div class="chat-message @(message.IsUser ? "user-message" : "bot-message")">
                @message.Text
            </div>
        }
    </div>


@code {
    private string userMessage = "";
    private List<ChatMessage> chatMessages = new ();

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    private const string ApiBaseUrl = "http://127.0.0.1:8000";
    private List<string> chunks; // List to store chunks from local storage

    // Load chunks from local storage during initialization
    protected override async Task OnInitializedAsync()
    {
        // Use JavaScript interop to load chunks from local storage
        chunks = await JSRuntime.InvokeAsync<List<string>>("getTextFromLocalStorage","pdfResponse");
    }
    private async Task SendMessage()
    {
        // Send the user's message to the chatbot and receive a response
        var response = await CallChatBot(userMessage);

        // Determine the color based on whether it's a user or bot message
        var isUser = true; // Set this based on your logic
        var colorClass = isUser ? "user-color" : "bot-color";

        chatMessages.Add(new ChatMessage { Text = response, IsUser = isUser, ColorClass = colorClass });

        // Clear the input field
        userMessage = "";

        // Scroll to the bottom of the chat container (you may need to adjust the element selector)
        await JSRuntime.InvokeVoidAsync("scrollToBottomJS");
    }

    private async Task<string> CallChatBot(string message)
    {
        try
        {
            // Create an instance of HttpClient
            using var httpClient = new HttpClient();

            // Prepare the request data as an anonymous object
            var requestData = new { chunks, question = message };

            // Serialize the request data to JSON
            var jsonRequest = JsonSerializer.Serialize(requestData);

            // Create a StringContent with JSON data
            var content = new StringContent(jsonRequest, System.Text.Encoding.UTF8, "application/json");

            // Send a POST request to the "/answer-question" endpoint with JSON data
            var response = await httpClient.PostAsync($"{ApiBaseUrl}/answer-question", content);

            // Check if the response was successful
            if (response.IsSuccessStatusCode)
            {
                // Read the response content as a string
                var responseBody = await response.Content.ReadAsStringAsync();
                
                // Parse the JSON string into a JsonDocument
                using (JsonDocument doc = JsonDocument.Parse(responseBody))
                {
                    // Access the 'response' field from the JSON document
                    if (doc.RootElement.TryGetProperty("response", out var responseProperty))
                    {
                        var extractedResponse = responseProperty.GetString();
                        return extractedResponse;
                    }
                }
                // Handle the case where the API request was not successful
                return "An error occurred while communicating with the API.";
            }
            else
            {
                // Handle the case where the API request was not successful
                return "An error occurred while communicating with the API.";
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that may occur during the request
            return $"An error occurred: {ex.Message}";
        }
    }

    // This function scrolls to the bottom of the chat container
    [JSInvokable]
    public void ScrollToBottom()
    {
        // Use JavaScript to scroll to the bottom of the chat container
        JSRuntime.InvokeVoidAsync("scrollToBottomJS");
    }
    
}

<script>
    // JavaScript function to scroll to the bottom
    function scrollToBottomJS() {
        var chatMessages = document.querySelector(".chat-messages");
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
</script>

<style>
    .chat-messages {
        max-height: 300px;
        overflow-y: auto;
    }

    .user-message {
        background-color: #007bff;
        color: white;
    }

    .bot-message {
        background-color: #28a745;
        color: white;
    }
</style>