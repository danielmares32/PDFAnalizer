@page "/pdfupload"
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using MudBlazor.Services
@using Microsoft.JSInterop
@inject ISnackbar Snackbar

<MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Start">Upload the PDF file for analysis</MudText>
<MudText Class="mb-8">Welcome to your new Insights!</MudText>

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" AppendMultipleFiles="false" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                   @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" MaxFileSize="5242880">
        <ButtonTemplate>
            <MudPaper Height="300px" Outlined="true" Class="@DragClass">
                <MudText Typo="Typo.h6">Drag and drop a PDF file here or click to select</MudText>
                @foreach (var file in fileNames)
                {
                    <MudChip Color="Color.Dark" Text="@file.Name" />
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="Upload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
        <MudButton OnClick="Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
    </MudToolBar>
</MudStack>

@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private List<IBrowserFile> fileNames = new List<IBrowserFile>();
    private const string ApiBaseUrl = "http://127.0.0.1:8000";
    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    
    private async void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        fileNames.Clear(); // Limpiar la lista antes de agregar nuevos archivos
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            if (file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
            {
                if (file.Size <= 5242880) // Verificar el tamaño máximo (5 MB)
                {
                    fileNames.Add(file);
                }
                else
                {
                    Snackbar.Add("El archivo PDF es demasiado grande (máximo 5 MB).", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Solo se permiten archivos PDF.", Severity.Error);
            }
        }
    }

    private async Task Clear()
    {
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private async void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Uploading your file...", Severity.Normal);

        // Check if there are files to upload
        if (fileNames.Any())
        {
            // Create an instance of HttpClient
            using var httpClient = new HttpClient();

            // Prepare the form data
            var formContent = new MultipartFormDataContent();
            foreach (var file in fileNames)
            {
                // Read the file content into a byte array
                var stream = file.OpenReadStream(maxAllowedSize: 1024 * 3000);
                var buffer = new byte[(int)stream.Length];
                await stream.ReadAsync(buffer, 0, (int)stream.Length);

                // Add the file content to the form data
                formContent.Add(new ByteArrayContent(buffer), "pdf", file.Name);
            }

            // Send the files to the FastAPI API
            var response = await httpClient.PostAsync($"{ApiBaseUrl}/upload-pdf", formContent);

            // Check the response and handle it as needed
            if (response.IsSuccessStatusCode)
            {
                // Extract the response content as a string
                var responseContent = await response.Content.ReadAsStringAsync();

                // Print the response content to the console
                Console.WriteLine(responseContent);

                // Save the response text to local storage using JavaScript interop
                await JSRuntime.InvokeVoidAsync("saveTextToLocalStorage", "pdfResponse", responseContent);

                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Add("Upload successful!", Severity.Success);
            }
            else
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Add("Upload failed!", Severity.Error);
            }
        }
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}